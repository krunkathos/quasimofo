--  Copyright 2016 krunkathos
--
--  Licensed under the Apache License, Version 2.0 (the "License");
--  you may not use this file except in compliance with the License.
--  You may obtain a copy of the License at
--
--      http://www.apache.org/licenses/LICENSE-2.0
--
--  Unless required by applicable law or agreed to in writing, software
--  distributed under the License is distributed on an "AS IS" BASIS,
--  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
--  See the License for the specific language governing permissions and
--  limitations under the License.

local menu = {}

local gfx = require("gfx")
local highscores = require("highscores")
local leveldata = require("leveldata")

menu.MOD_DELAY = 8

menu.title = nil
menu.title_image = nil

menu.options = { "NEW GAME", "CONTINUE", "KEYS", "CREDITS", "HI SCORES", "EXIT" }
menu.full_options = { "NEW GAME", "CONTINUE", "KEYS", "CREDITS", "HI SCORES", "EDITOR", "EXIT" }
menu.select = 1
menu.mode = { "SHOWMENU", "SHOWCREDITS", "SHOWHISCORES", "SHOWKEYS" }
menu.mode_select = 1
menu.mode_count = 0

menu.credits = {
    "Quasimofo Credits",
    "Designer & Coder - krunkathos",
    "Playtester - lynx3000",
    "",
    "Tserial - Taehl (SelfMadeSpirit@gmail.com)",
    "Tiles - modified from tileset by Ayene Chan",
    "Title image - modified from image by nahim89",
    "  licensed under CC-BY-3.0",
    "  http://creativecommons.org/licenses/by/3.0/",
    "",
    "Music - Autogenerated by cgMusic, see",
    "http://codeminion.com/blogs/maciek/2008/05/",
    "cgmusic-computers-create-music/"
}

menu.keys = {
    "Quasimofo Keys",
    " ",
    "Z - move left",
    "X - move right",
    "P - move up rope",
    "L - move down rope",
    "Space - jump",
    "M - toggle music on/off",
    "Alt+Space - toggle fullscreen"
}

menu.sound_full = nil
menu.sound_music = nil

function menu.load()
    menu.title = love.graphics.newImage("gfx/title.png")
    menu.title_image = love.graphics.newImage("gfx/title_image.png")
    menu.sound_full = love.audio.newSource("sounds/wooble.wav", "static")
    menu.sound_full:setVolume(0.8)
    
    menu.sound_music = love.audio.newSource("music/menumusic.mp3")
    menu.sound_music:setLooping(true)
    
    highscores.load()
end

function menu.init()
    if leveldata.load_checkpoint("checkpoint.dat") > 1 then menu.select = 2 else menu.select = 1 end
    menu.mode_select = 1
    menu.sound_music:play()
    menu.mode_count = 0
end

function menu.update(dt)
    if menu.mode[menu.mode_select] ~= "SHOWKEYS" then menu.mode_count = menu.mode_count + dt end
    if menu.mode_count > menu.MOD_DELAY then
        menu.mode_count = 0
        menu.mode_select = (menu.mode_select % 2)+1
    end
end

function menu.keyreleased(key, mode)
    if menu.mode_select > 1 then
        if key ~= nil then menu.mode_select = 1 end
        return mode
    end

    menu.mode_count = 0
    if key == "m" and love.keyboard.isDown("lctrl") and love.keyboard.isDown("lshift") then
        menu.sound_full:play()
        menu.options = menu.full_options
    elseif key == "up" and menu.select > 1 then menu.select = menu.select - 1
    elseif key == "down" and menu.select < #menu.options then menu.select = menu.select + 1
    elseif key == "return" then mode = menu.select_option()
    end

    return mode
end

function menu.select_option()
    local opt = menu.options[menu.select]
    
    if opt ~= "KEYS" and opt ~= "CREDITS" and opt ~= "HI SCORES" then menu.sound_music:stop() end
    
    if opt == "NEW GAME" then return "START_GAME"
    elseif opt == "CONTINUE" then return "CONTINUE_GAME"
    elseif opt == "KEYS" then menu.mode_select = 4
    elseif opt == "CREDITS" then menu.mode_select = 2
    elseif opt == "HI SCORES" then menu.mode_select = 3
    elseif opt == "EDITOR" then return "START_EDITOR"
    elseif opt == "EXIT" then return "EXIT"
    end
    return "MENU"
end

function menu.draw()
    local mode = menu.mode[menu.mode_select]
    love.graphics.setColor(200, 200, 200)
    love.graphics.draw(menu.title_image, 110, 60)
    love.graphics.setColor(255, 255, 255)
    love.graphics.draw(menu.title, 0, 0)
    
    if mode == "SHOWMENU" then menu.draw_menu()
    elseif mode == "SHOWCREDITS" then menu.draw_list(menu.credits)
    elseif mode == "SHOWKEYS" then menu.draw_list(menu.keys)
    elseif mode == "SHOWHISCORES" then highscores.draw_scores(menu.keys)
    end
end

function menu.draw_menu()
    for m = 1, #menu.options do
        love.graphics.setColor(0, 0, 0)
        for y = -1, 1, 2 do
            for x = -1, 1, 2 do
                love.graphics.printf(menu.options[m], 200+x, 120 + ((m-1)*16) + y, 120, "left")                
            end
        end
        if menu.select == m then
            love.graphics.setColor(255, 255, 255)
        else
            love.graphics.setColor(160, 160, 160)
        end
        love.graphics.printf(menu.options[m], 200, 120 + ((m-1)*16), 120, "left")
    end
end

function menu.draw_list(list)
    love.graphics.setFont(gfx.font_small)
    love.graphics.setColor(255, 255, 255)
    for c = 1, #list do
        love.graphics.printf(list[c], 10, 100 + ((c-1)*8), 310, "right")
    end
    love.graphics.setFont(gfx.font_normal)
end

return menu
